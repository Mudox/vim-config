" vim: filetype=vim foldmethod=marker fileformat=unix

let g:this_meta.site = 'https://github.com/mhinz/vim-startify.git'

" NOTE: the dict bellow will be passed to command 'PlugInstall'
" as the 2nd argument to install this plugin.
let g:this_meta.vimplug_cmd_dict = {}

function g:this_meta.config()
  " indices
  let numbers = map(range(10), 'string(v:val)')
  let letters = ['A', 'C', 'D', 'F', 'G', 'H', 'M', 'L', 'O', 'P', 'Q', 'R',
        \ 'U', 'V', 'W', 'X', 'Y', 'Z']
  let letters += map(letters, 'tolower(v:val)')
  let indices = numbers + letters
  let g:startify_custom_indices = indices

  " header text center function
  function! s:filter_header(lines) abort
    let longest_line   = max(map(copy(a:lines), 'len(v:val)'))
    let centered_lines = map(copy(a:lines),
          \ 'repeat(" ", (&columns / 2) - (longest_line / 2) + 5) . v:val')
    let centered_lines = map(centered_lines, "substitute(v:val, '^\\s\\+$', '', '')")
    return centered_lines
  endfunction

  " randomly pick an art on every startup
  let mudox_ascii_arts = [
        \ [
        \     '                         #',
        \     ' ##   ##                 #',
        \     ' # # # #  #     #   ######   #####   ##   ##',
        \     ' #  #  #  #     #  #     #  #     #    # #',
        \     ' #     #  #     #  #     #  #     #     #',
        \     ' #     #  #    ##  #     #  #     #    # #',
        \     ' #     #   #### #   ######   #####   ##   ##',
        \ ],
        \
        \ [
        \     ' #     #                 #',
        \     ' ##   ##                 #',
        \     ' # # # #  #     #   ######   #####   ##   ##',
        \     ' #  #  #  #     #  #     #  #     #    # #',
        \     ' #     #  #     #  #     #  #     #     #',
        \     ' #     #  #    ##  #     #  #     #    # #',
        \     ' #     #   #### #   ######   #####   ##   ##',
        \ ],
        \
        \
        \ [
        \     ' #     #',
        \     ' ##   ## #    # #####   ####  #    #',
        \     ' # # # # #    # #    # #    #  #  #',
        \     ' #  #  # #    # #    # #    #   ##',
        \     ' #     # #    # #    # #    #   ##',
        \     ' #     # #    # #    # #    #  #  #',
        \     ' #     #  ####  #####   ####  #    #',
        \ ],
        \
        \
        \ [
        \     ' #     #',
        \     ' ##   ## #    # #####   ####  #    #',
        \     ' # # # # #    # #    # #    #  #  #',
        \     ' #  #  # #    # #    # #    #   ##',
        \     ' #     # #    # #    # #    #   ##',
        \     ' #     # #    # #    # #    #  #  #',
        \     ' #     #  ####  #####   ####  #    #',
        \ ],
        \
        \ [
        \     ' #   #             #',
        \     ' ## ##  #   #   ####   ###   #  #',
        \     ' # # #  #   #  #   #  #   #   ##',
        \     ' # # #  #   #  #   #  #   #   ##',
        \     ' #   #   ###    ####   ###   #  #',
        \ ],
        \
        \
        \ [
        \     '      ___           ___           ___           ___           __',
        \     '     /  /\         /  /\         /  /\         /  /\         |  |\',
        \     '    /  /::|       /  /:/        /  /::\       /  /::\        |  |:|',
        \     '   /  /:|:|      /  /:/        /  /:/\:\     /  /:/\:\       |  |:|',
        \     '  /  /:/|:|__   /  /:/        /  /:/  \:\   /  /:/  \:\      |__|:|__',
        \     ' /__/:/_|::::\ /__/:/     /\ /__/:/ \__\:| /__/:/ \__\:\ ____/__/::::\',
        \     ' \__\/  /~~/:/ \  \:\    /:/ \  \:\ /  /:/ \  \:\ /  /:/ \__\::::/~~~~',
        \     '       /  /:/   \  \:\  /:/   \  \:\  /:/   \  \:\  /:/     |~~|:|',
        \     '      /  /:/     \  \:\/:/     \  \:\/:/     \  \:\/:/      |  |:|',
        \     '     /__/:/       \  \::/       \__\::/       \  \::/       |__|:|',
        \     '     \__\/         \__\/            ~~         \__\/         \__\|',
        \ ],
        \
        \
        \ [
        \     '      ___           ___           ___           ___           ___',
        \     '     /\__\         /\__\         /\  \         /\  \         |\__\',
        \     '    /::|  |       /:/  /        /::\  \       /::\  \        |:|  |',
        \     '   /:|:|  |      /:/  /        /:/\:\  \     /:/\:\  \       |:|  |',
        \     '  /:/|:|__|__   /:/  /  ___   /:/  \:\__\   /:/  \:\  \      |:|__|__',
        \     ' /:/ |::::\__\ /:/__/  /\__\ /:/__/ \:|__| /:/__/ \:\__\ ____/::::\__\',
        \     ' \/__/~~/:/  / \:\  \ /:/  / \:\  \ /:/  / \:\  \ /:/  / \::::/~~/~',
        \     '       /:/  /   \:\  /:/  /   \:\  /:/  /   \:\  /:/  /   ~~|:|~~|',
        \     '      /:/  /     \:\/:/  /     \:\/:/  /     \:\/:/  /      |:|  |',
        \     '     /:/  /       \::/  /       \::/__/       \::/  /       |:|  |',
        \     '     \/__/         \/__/         ~~            \/__/         \|__|',
        \ ],
        \
        \
        \ [
        \     '                  _',
        \     '  /\/\  _   _  __| | _____  __',
        \     ' /    \| | | |/ _` |/ _ \ \/ /',
        \     '/ /\/\ \ |_| | (_| | (_) >  <',
        \     '\/    \/\__,_|\__,_|\___/_/\_\',
        \ ],
        \
        \
        \ [
        \     '  __  __           _',
        \     ' |  \/  |_   _  __| | _____  __',
        \     ' | |\/| | | | |/ _` |/ _ \ \/ /',
        \     ' | |  | | |_| | (_| | (_) >  <',
        \     ' |_|  |_|\__,_|\__,_|\___/_/\_\',
        \ ],
        \
        \ [
        \     '     _/      _/                  _/',
        \     '   _/_/  _/_/  _/    _/    _/_/_/    _/_/    _/    _/',
        \     '  _/  _/  _/  _/    _/  _/    _/  _/    _/    _/_/',
        \     ' _/      _/  _/    _/  _/    _/  _/    _/  _/    _/',
        \     '_/      _/    _/_/_/    _/_/_/    _/_/    _/    _/',
        \ ],
        \ ]

  let selected_art = mudox_ascii_arts[localtime() % len(mudox_ascii_arts)]
  let g:startify_custom_header = s:filter_header(selected_art)

endfunction
